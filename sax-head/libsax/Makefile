#############################################################################
# Makefile for building: libsax.so.7.1.0
# Generated by qmake (1.07a) (Qt 3.3.4) on: Tue Jun 14 15:42:59 2005
# Project:  sax.pro
# Template: lib
# Command: $(QMAKE) -o Makefile sax.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -g -Wall -W -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -g -fPIC  -DQT_NO_DEBUG -DQT_SHARED -DQT_TABLET_SUPPORT -DQT_THREAD_SUPPORT
CXXFLAGS = -pipe -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -g -rdynamic -DPIC -Wall -W -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -g -fPIC  -DQT_NO_DEBUG -DQT_SHARED -DQT_TABLET_SUPPORT -DQT_THREAD_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/usr/lib/qt3/mkspecs/linux-g++ -I. -I-I -I/usr/X11R6/include -I/usr/include -I$(QTDIR)/include
LINK     = g++
LFLAGS   = -shared -Wl,-soname,libsax.so.7
LIBS     = $(SUBLIBS) -L/usr/lib/ -L$(QTDIR)/lib/ -L/usr/X11R6/lib -lxkbfile -lxf86config -lhd -lqt-mt
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = ./

####### Files

HEADERS = storage.h \
		import.h \
		process.h \
		export.h \
		config.h \
		exception.h \
		sax.h \
		init.h \
		desktop.h \
		extensions.h \
		card.h \
		keyboard.h \
		path.h \
		pointers.h \
		layout.h \
		device.h \
		file.h \
		interface.h
SOURCES = storage.cpp \
		import.cpp \
		process.cpp \
		export.cpp \
		config.cpp \
		exception.cpp \
		init.cpp \
		desktop.cpp \
		extensions.cpp \
		card.cpp \
		keyboard.cpp \
		path.cpp \
		pointers.cpp \
		layout.cpp \
		device.cpp \
		file.cpp \
		interface.cpp
OBJECTS = storage.o \
		import.o \
		process.o \
		export.o \
		config.o \
		exception.o \
		init.o \
		desktop.o \
		extensions.o \
		card.o \
		keyboard.o \
		path.o \
		pointers.o \
		layout.o \
		device.o \
		file.o \
		interface.o
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = moc_process.cpp \
		moc_exception.cpp
OBJMOC = moc_process.o \
		moc_exception.o
DIST	   = sax.pro
QMAKE_TARGET = sax
DESTDIR  = 
TARGET   = libsax.so.7.1.0
TARGETA	= libsax.a
TARGETD	= libsax.so.7.1.0
TARGET0	= libsax.so
TARGET1	= libsax.so.7
TARGET2	= libsax.so.7.1

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile  $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC) $(SUBLIBS) $(OBJCOMP)  
	-$(DEL_FILE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2)
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS) $(OBJCOMP)
	-ln -s $(TARGET) $(TARGET0)
	-ln -s $(TARGET) $(TARGET1)
	-ln -s $(TARGET) $(TARGET2)



staticlib: $(TARGETA)

$(TARGETA):  $(UICDECLS) $(OBJECTS) $(OBJMOC) $(OBJCOMP)
	-$(DEL_FILE) $(TARGETA) 
	$(AR) $(TARGETA) $(OBJECTS) $(OBJMOC)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: sax.pro  /usr/lib/qt3/mkspecs/linux-g++/qmake.conf /usr/lib/qt3/lib/libqt-mt.prl
	$(QMAKE) -o Makefile sax.pro
qmake: 
	@$(QMAKE) -o Makefile sax.pro

dist: 
	@mkdir -p .tmp/sax && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .tmp/sax/ && ( cd `dirname .tmp/sax` && $(TAR) sax.tar sax && $(GZIP) sax.tar ) && $(MOVE) `dirname .tmp/sax`/sax.tar.gz . && $(DEL_FILE) -r .tmp/sax

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:

yaccclean:
lexclean:
clean: mocclean
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)
	-$(DEL_FILE) $(TARGET0) $(TARGET1) $(TARGET2) $(TARGETA)


FORCE:

####### Compile

storage.o: storage.cpp storage.h \
		exception.h

import.o: import.cpp import.h \
		storage.h \
		exception.h \
		process.h

process.o: process.cpp process.h \
		storage.h \
		exception.h

export.o: export.cpp export.h \
		import.h \
		storage.h \
		exception.h \
		process.h

config.o: config.cpp config.h \
		export.h \
		import.h \
		storage.h \
		exception.h \
		process.h

exception.o: exception.cpp exception.h

init.o: init.cpp init.h \
		exception.h

desktop.o: desktop.cpp desktop.h \
		import.h \
		card.h \
		path.h \
		file.h \
		storage.h \
		exception.h \
		process.h

extensions.o: extensions.cpp extensions.h \
		import.h \
		device.h \
		pointers.h \
		keyboard.h \
		card.h \
		path.h \
		storage.h \
		exception.h \
		process.h

card.o: card.cpp card.h \
		import.h \
		storage.h \
		exception.h \
		process.h

keyboard.o: keyboard.cpp keyboard.h \
		import.h \
		storage.h \
		exception.h \
		process.h

path.o: path.cpp path.h \
		import.h \
		storage.h \
		exception.h \
		process.h

pointers.o: pointers.cpp pointers.h \
		import.h \
		device.h \
		storage.h \
		exception.h \
		process.h

layout.o: layout.cpp layout.h \
		import.h \
		card.h \
		storage.h \
		exception.h \
		process.h

device.o: device.cpp device.h \
		import.h \
		storage.h \
		exception.h \
		process.h

file.o: file.cpp file.h \
		exception.h

interface.o: interface.cpp interface.h \
		sax.h \
		storage.h \
		export.h \
		import.h \
		init.h \
		config.h \
		keyboard.h \
		pointers.h \
		desktop.h \
		extensions.h \
		layout.h \
		path.h \
		card.h \
		exception.h \
		process.h \
		device.h \
		file.h

moc_process.o: moc_process.cpp  process.h storage.h \
		exception.h

moc_exception.o: moc_exception.cpp  exception.h 

moc_process.cpp: $(MOC) process.h
	$(MOC) process.h -o moc_process.cpp

moc_exception.cpp: $(MOC) exception.h
	$(MOC) exception.h -o moc_exception.cpp

####### Install

install:  

uninstall:  

