<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE refentry PUBLIC
	"-//OASIS//DTD DocBook XML V4.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
>
<refentry id="SaXImportProfile">

<!--
#=============================================
# Header settings...
#=============================================
-->
<refentryinfo><title>libsax class reference</title></refentryinfo>
<refentryinfo><date>January 2005</date></refentryinfo>
<refentryinfo><productname>libsax-4.8</productname></refentryinfo>
<refmeta>
<refentrytitle>SaX::ImportProfile</refentrytitle>
<manvolnum>3</manvolnum>
</refmeta>
<refnamediv>
<refname>SaXImportProfile</refname>
<refpurpose>Abstraction of the ISaX profile interface layer</refpurpose>
</refnamediv>

<!--
#=============================================
# SYNOPSIS...
#=============================================
-->
<refsynopsisdiv>
<synopsis>
#include &lt;sax.h&gt;
</synopsis>
Inherits <filename>SaXProcess</filename>
</refsynopsisdiv>

<!--
#=============================================
# Public Members...
#=============================================
-->
<refsect2><title>Public Members</title>
<para>
    <itemizedlist>
    <listitem><para>
		<function>SaXImportProfile</function> ( const QString&amp; )
    </para></listitem>
    <listitem><para>
		void <function>setDevice</function> ( int  )
    </para></listitem>
    <listitem><para>
		void <function>doImport</function>  ( void )
    </para></listitem>
    <listitem><para>
		SaXImport* <function>getImport</function> ( int = SAX_CARD )
    </para></listitem>
    </itemizedlist>
</para>
</refsect2>

<!--
#=============================================
# Private Members...
#=============================================
-->
<refsect2><title>Private Members</title>
<para>
    <itemizedlist>
    <listitem><para>
		void <function>splitImport</function> ( void )
    </para></listitem>
    </itemizedlist>
</para>
</refsect2>

<!--
#=============================================
# DESCRIPTION...
#=============================================
-->
<refsect1><title>Description</title>
<para>
The SaXImportProfile class provides an abstraction for the ISaX interface
layer concerning the profiles to become applied. The class inherits from
SaXProcess which itself inherits from SaXStorage. the data is obtained from
a <filename>/var/lib/sax/createPRO.pl</filename> script call which is able to read the given
<filename>profile</filename> file and import the data into the automatic configuration suggestion.
After this it will export the changes made by the profile and this data is
stored into the protected area of a storage object. Because of the fact
a profile can change data in any section the SaXImportProfile class will
split the data into the appropriate sections and made it accessable using
the <function>getImport</function> method. A SaXImportProfile object will be constructed with
one parameter which defines the profile filename to import.
</para>
</refsect1>

<!--
#=============================================
# EXAMPLES...
#=============================================
-->
<refsect2><title>Example</title>
<programlisting>
#include &lt;sax.h&gt;

SaXImportProfile* nvidiaTwinview = new SaXImportProfile (
    "/usr/X11R6/lib/sax/profile/NVidia_Twinview"
);
nvidiaTwinview -&gt; doImport();
SaXImport* profileDesktop = nvidiaTwinview -&gt; getImport (SAX_CARD);

SaXImport* desktop = new SaXImport (SAX_CARD);
desktop -&gt; setSource (SAX_AUTO_PROBE);
desktop -&gt; doImport();

desktop -&gt; merge (profileDesktop-&gt;getTablePointerDATA());

...
</programlisting>
</refsect2>

<!--
#=============================================
# MEMBER FUNCTION DOCUMENTATION...
#=============================================
-->
<refsect1><title>MEMBER FUNCTION DOCUMENTATION</title>
<variablelist>
<varlistentry>
<term><function>SaXImportProfile::SaXImportProfile</function> (const QString &amp; p)</term>
<listitem><para>
Constructs a SaXImportProfile object using the information from the
given file set by <filename>profile</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXImportProfile::doImport</function> (void)</term>
<listitem><para>
Start importing data will perform the call of the
<filename>/var/lib/sax/createPRO.pl</filename> script
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXImportProfile::splitImport</function> (void)</term>
<listitem><para>
This private member function is called while doImport has
been called. A profile can change data in different sections
of the configuration file. Therefore it is needed to split the
imported information to be able to create the different SaXImport
objects holding the appropriate data.
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXImportProfile::setDevice</function> (int dev)</term>
<listitem><para>
Set the base section ID number the profile should be applied to.
For example within a traditional multihead environment a profile setting
a specific graphics device option can be applied to either the first
or the second device. section ID numbers always starts with ID (0).
An important enumeration behavior is applied to the InputDevice sections.
At this level the odd numbers (1,3,5,...) defines the pointer devices
and the even number (0,2,4,...) are used for the keyboard devices only.
</para></listitem>
</varlistentry>
<varlistentry>
<term>SaXImport* <function>SaXImportProfile::getImport</function> (int section)</term>
<listitem><para>
Refering to the splitImport this member function is used to
obtain the profile information from the section set by <filename>section</filename>.
section must be one of <function>SAX_CARD,SAX_DESKTOP,SAX_LAYOUT</function>
or <function>SAX_POINTERS</function>
</para></listitem>
</varlistentry>
</variablelist>
</refsect1>

<!--
#=============================================
# POSSIBLE EXCEPTIONS...
#=============================================
-->
<refsect1><title>POSSIBLE EXCEPTIONS</title>
<variablelist>
<varlistentry>
<term><function>saxProcessFailed</function></term>
<listitem><para>
The process to call the <filename>createPRO.pl</filename> script failed. This is fatal
because no information will be available.
</para></listitem>
</varlistentry>
<varlistentry>
<term><function>saxProfileNotFound</function></term>
<listitem><para>
Constructing a SaXImportProfile object will check if the given
profile file exists, if not this exception is throwed.
</para></listitem>
</varlistentry>
<varlistentry>
<term><function>saxProfileUndefined</function></term>
<listitem><para>
The SaXImportProfile::getImport member function will throw this
exception if the given section ID number is not defined. See the
the getImport description for details.
</para></listitem>
</varlistentry>
</variablelist>
</refsect1>


<!--
#=============================================
# COPYRIGHT...
#=============================================
-->
<refsect1><title>COPYRIGHT</title>
<para>
(C) Copyright 2000-2005 - SuSE GmbH, <ulink>http://www.suse.de</ulink>.
See the license file included in the distribution for a complete license
statement.
</para>
</refsect1>

<!--
#=============================================
# AUTHOR...
#=============================================
-->
<refsect1><title>AUTHOR</title>
<para>
Marcus Sch√§fer <email>ms@suse.de</email>
</para>
</refsect1>
</refentry>
