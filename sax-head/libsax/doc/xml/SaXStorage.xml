<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE refentry PUBLIC
	"-//OASIS//DTD DocBook XML V4.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
>
<refentry id="SaXStorage">

<!--
#=============================================
# Header settings...
#=============================================
-->
<refentryinfo><title>libsax class reference</title></refentryinfo>
<refentryinfo><date>January 2005</date></refentryinfo>
<refentryinfo><productname>libsax-4.8</productname></refentryinfo>
<refmeta>
<refentrytitle>SaX::Storage</refentrytitle>
<manvolnum>3</manvolnum>
</refmeta>
<refnamediv>
<refname>SaXStorage</refname>
<refpurpose>Abstraction of the libsax storage layer</refpurpose>
</refnamediv>

<!--
#=============================================
# SYNOPSIS...
#=============================================
-->
<refsynopsisdiv>
<synopsis>
#include &lt;sax.h&gt;
</synopsis>
Inherits <filename>SaXException</filename>
</refsynopsisdiv>

<!--
#=============================================
# Public Members...
#=============================================
-->
<refsect2><title>Public Members</title>
<para>
	<itemizedlist>
	<listitem><para>
		void <function>setItem</function> ( const QString&amp;, const QString&amp; )
	</para></listitem>
	<listitem><para>
		void <function>addItem</function> ( const QString&amp;, const QString&amp; )
	</para></listitem>
	<listitem><para>
		void <function>removeItem</function>  ( const QString&amp;, const QString&amp; )
	</para></listitem>
	<listitem><para>
		void <function>removeEntry</function> ( const QString&amp; )
	</para></listitem>
	<listitem><para>
		void <function>setDenomination</function> (const QString&amp;,const QString&amp;,const QString&amp;)
	</para></listitem>
	<listitem><para>
		void <function>setRawItem</function> ( const QString&amp;, const QString&amp;,const QString&amp; )
	</para></listitem>
	<listitem><para>
		void <function>addRawItem</function> ( const QString&amp;, const QString&amp;,const QString&amp; )
	</para></listitem>
	<listitem><para>
		void <function>removeRawItem</function> ( const QString&amp;, const QString&amp; )
	</para></listitem>
	<listitem><para>
		QString <function>getItem</function> ( const QString&amp; )
	</para></listitem>
	<listitem><para>
		bool <function>setID</function> ( int )
	</para></listitem>
	<listitem><para>
		bool <function>addID</function> ( int )
	</para></listitem>
	<listitem><para>
		bool <function>delID</function> ( int )
	</para></listitem>
	<listitem><para>
		int <function>getCurrentID</function> ( void )
	</para></listitem>
	<listitem><para>
		QDict&lt;QString&gt; <function>getTable</function> ( int )
	</para></listitem>
	<listitem><para>
		QDict&lt;QString&gt;  <function>getCurrentTable</function> ( void )
	</para></listitem>
	<listitem><para>
		QDict&lt;QString&gt;* <function>getTablePointer</function> ( int  )
	</para></listitem>
	<listitem><para>
		QDict&lt;QString&gt;* <function>getCurrentTablePointer</function> ( void )
	</para></listitem>
	<listitem><para>
		void <function>merge</function> ( QList&lt; QDict&lt;QString&gt; &gt; )
	</para></listitem>
	<listitem><para>
		int <function>count</function> ( bool = false )
	</para></listitem>
	<listitem><para>
		void <function>addGroup</function> ( const QString&amp;,const QString&amp;, const QString&amp; )
	</para></listitem>
	<listitem><para>
		QDict&lt; QDict&lt;QString&gt; &gt; <function>getTablePointerCDB</function>  ( void )
	</para></listitem>
	<listitem><para>
		QList&lt; QDict&lt;QString&gt; &gt; <function>getTablePointerCDB_DATA</function> ( const QString&amp; )
	</para></listitem>
	<listitem><para>
		QList&lt; QDict&lt;QString&gt; &gt; <function>getTablePointerDATA</function> ( void )
	</para></listitem>
	<listitem><para>
		QDict&lt;QString&gt; <function>operator[]</function> ( int )
	</para></listitem>
	<listitem><para>
		QString <function>operator[]</function> ( const QString&amp; )
	</para></listitem>
	<listitem><para>
		<function>SaXStorage</function> ( void )
	</para></listitem>
	</itemizedlist>
</para>
</refsect2>

<!--
#=============================================
# DESCRIPTION...
#=============================================
-->
<refsect1><title>Description</title>
<para>
The SaXStorage class provides all the structures and member functions
to store, remove/retrieve and change configuration related
information. The internal data structure is based on a list of hashes
or a an hash of hashes. The standard data is stored in a dictionary
list whereas the special CDB data is stored in a dictionary of
dictionaries
</para>
</refsect1>

<!--
#=============================================
# EXAMPLES...
#=============================================
-->
<refsect2><title>Examples</title>
<variablelist>
<varlistentry>
<term><filename>Standard data handling...</filename></term>
<listitem>
<programlisting>
#include &lt;sax.h&gt;

SaXStorage container;
container.setItem ("Identifier","Monitor[0]");
container.setDenomination ("01","Belinea","102030");
container.setRawItem ("RawOption","opt1","val1");
container.addRawItem ("RawOption","opt2","val2");
container.removeRawItem ("RawOption","opt1"); 

//QDict&lt;QString&gt; section = container.getCurrentTable();
QDict&lt;QString&gt; section = container[0];

QString* data = section.take ("RawOption");
printf ("%s\n",data->ascii());

printf ("%s\n",container["RawOption"].ascii());
</programlisting>
</listitem>
</varlistentry>
<varlistentry>
<term><filename>CDB data handling...</filename></term>
<listitem>
<programlisting>
#include &lt;sax.h&gt;

SaXProcess* pCDB = new SaXProcess ();
pCDB -> start ( CDB_CARDS );
QDict&lt; QDict&lt;QString&gt; &gt; cdb = pCDB -> getTablePointerCDB ();
QDictIterator&lt; QDict&lt;QString&gt; &gt; it (cdb);
for (; it.current(); ++it) {
    printf ("Group: %s\n",it.currentKey().ascii());
}
</programlisting>
</listitem>
</varlistentry>
</variablelist>
</refsect2>

<!--
#=============================================
# MEMBER FUNCTION DOCUMENTATION...
#=============================================
-->
<refsect1><title>MEMBER FUNCTION DOCUMENTATION</title>
<variablelist>
<varlistentry>
<term><function>SaXStorage::SaXStorage</function> (void)</term>
<listitem><para>
Creates a SaXStorage object with an empty dictionary at
section ID (0)
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXStorage::setItem</function> ( const QString&amp; key, const QString&amp; val )</term>
<listitem><para>
Stores <filename>key</filename> and <filename>value</filename> into
the dictionary found at the current section ID
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXStorage::addItem</function> ( const QString&amp; key, const QString&amp; val )</term>
<listitem><para>
Add a value to the current value of <filename>key</filename> seperated by
the comma sign. If there is no data behind <filename>key</filename> nothing
will happen
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXStorage::removeItem</function> ( const QString&amp; key, const QString&amp; val )</term>
<listitem><para>
remove the value <filename>val</filename> from the current value list stored
behind the key <filename>key</filename>. If the value is not found the list
won't be changed
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXStorage::removeEntry</function> ( const QString&amp; key )</term>
<listitem><para>
Delete a complete entry from the data dictionary
The entry is searched as key named <filename>key</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>QString <function>SaXStorage::getItem</function> ( const QString&amp; key )</term>
<listitem><para>
returns a copy of the value of <filename>key</filename> refering
to the current data record
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXStorage::setDenomination</function> ( const QString&amp; key, const QString&amp; vendor,const QString&amp; name )</term>
<listitem><para>
Stores the first parameter as <filename>key</filename> and combines the following
parameters as one <filename>value</filename> seperated by a semicolon.
<function>setDenomination()</function> is normally used to save a
key -> vendor;name relation to the storage object.
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXStorage::setRawItem</function> ( const QString&amp; key, const QString&amp; optname,const QString&amp; optval )</term>
<listitem><para>
Stores the first parameter as <filename>key</filename> and combines the following parameters
as one <filename>value</filename> of the format: <function>'"optname" "optval"'</function>.
<function>setRawItem()</function> is normally used to save a special options which
needs a value to work correctly
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXStorage::addRawItem</function> ( const QString&amp; key, const QString&amp; optname,const QString&amp; optval )</term>
<listitem><para>
Does the same as <function>setRawItem()</function> but adds the new value to the current
contents of <filename>key</filename>. A comma is used as separator between the different
'"optname" "optval"' pairs: <function>'"curname" "curval","optname" "optval"'</function>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXStorage::removeRawItem</function> ( const QString&amp; key, const QString&amp; optname )</term>
<listitem><para>
Removes the <function>'"optname" "optval"'</function> pair matching
<filename>optname</filename> which is found as value of <filename>key</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXStorage::merge</function> (QList&lt; QDict&lt;QString&gt; &gt; data)</term>
<listitem><para>
Merge the information of the given dictionary list into the
dictionary list of the object
</para></listitem>
</varlistentry>
<varlistentry>
<term>bool <function>SaXStorage::addID</function> ( int id )</term>
<listitem><para>
Add a new section with ID <filename>sectionID</filename> to the dictionary list.
On success true is returned
</para></listitem>
</varlistentry>
<varlistentry>
<term>bool <function>SaXStorage::delID</function> ( int id )</term>
<listitem><para>
Delete a data record and adapt the Identifier strings
to provide consistency. If the record with id <filename>id</filename>
couldn't be removed false is returned
</para></listitem>
</varlistentry>
<varlistentry>
<term>bool <function>SaXStorage::setID</function> ( int id )</term>
<listitem><para>
Set the current section ID to the value of <filename>id</filename>.
If the sectionID does not exist false is returned
</para></listitem>
</varlistentry>
<varlistentry>
<term>int <function>SaXStorage::getCurrentID</function> ( void )</term>
<listitem><para>
Returns the current section ID
</para></listitem>
</varlistentry>
<varlistentry>
<term>QDict&lt;QString&gt; <function>SaXStorage::getTable</function> ( int id )</term>
<listitem><para>
Returns a copy of the dictionary bound to the given
section ID
</para></listitem>
</varlistentry>
<varlistentry>
<term>QDict&lt;QString&gt; <function>SaXStorage::getCurrentTable</function> ( void )</term>
<listitem><para>
Returns a copy of the dictionary bound to the
current section ID
</para></listitem>
</varlistentry>
<varlistentry>
<term>QDict&lt;QString&gt;* <function>SaXStorage::getTablePointer</function> ( int id )</term>
<listitem><para>
Returns a pointer to the dictionary bound to the given
section ID
</para></listitem>
</varlistentry>
<varlistentry>
<term>QDict&lt;QString&gt;* <function>SaXStorage::getCurrentTablePointer</function> ( void )</term>
<listitem><para>
Returns a pointer to the dictionary bound to the
current section ID
</para></listitem>
</varlistentry>
<varlistentry>
<term>int <function>SaXStorage::count</function> (bool noEmptyItem)</term>
<listitem><para>
if noEmptyItem is set to true this method will calculate
the number of non empty data records. If noEmptyItem is set
to false which is the default the method will return the
number of elements stored in the mData data record list
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXStorage::addGroup</function> ( const QString&amp; group,const QString&amp; key, const QString&amp; value )</term>
<listitem><para>
Add a CDB group record to the objects data section. The first
parameter builds the <filename>key</filename> of the record which is a string including
the vendor and name information separated by a colon. the following
parameters are the groupkey and the groupvalue for this group. If the
group already exists only the data defined by groupkey and groupvalue
will be added to the group
</para></listitem>
</varlistentry>
<varlistentry>
<term>QDict&lt; QDict&lt;QString&gt; &gt; <function>SaXStorage::getTablePointerCDB</function> ( void )</term>
<listitem><para>
Returns a pointer to the complete CDB data dictionary
</para></listitem>
</varlistentry>
<varlistentry>
<term>QList&lt; QDict&lt;QString&gt; &gt; <function>SaXStorage::getTablePointerCDB_DATA</function> ( const QString&amp; group )</term>
<listitem><para>
A method for the CDB interface only. Returns a pointer
to the dictionary found under the key <filename>group</filename>. The pointer
is appended to a list because in most cases the return
value is used as parmeter to the <function>merge()</function> method
</para></listitem>
</varlistentry>
<varlistentry>
<term>QList&lt; QDict&lt;QString&gt; &gt; <function>SaXStorage::getTablePointerDATA</function> ( void )</term>
<listitem><para>
Returns a pointer to the complete standard data dictionary list
</para></listitem>
</varlistentry>
</variablelist>
</refsect1>


<!--
#=============================================
# COPYRIGHT...
#=============================================
-->
<refsect1><title>COPYRIGHT</title>
<para>
(C) Copyright 2000-2005 - SuSE GmbH, <ulink>http://www.suse.de</ulink>.
See the license file included in the distribution for a complete license
statement.
</para>
</refsect1>

<!--
#=============================================
# AUTHOR...
#=============================================
-->
<refsect1><title>AUTHOR</title>
<para>
Marcus Schäfer <email>ms@suse.de</email>
</para>
</refsect1>
</refentry>
