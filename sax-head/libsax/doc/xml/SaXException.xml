<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE refentry PUBLIC
	"-//OASIS//DTD DocBook XML V4.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
>
<refentry id="SaXException">

<!--
#=============================================
# Header settings...
#=============================================
-->
<refentryinfo><title>libsax class reference</title></refentryinfo>
<refentryinfo><date>January 2005</date></refentryinfo>
<refentryinfo><productname>libsax-4.8</productname></refentryinfo>
<refmeta>
<refentrytitle>SaX::Exception</refentrytitle>
<manvolnum>3</manvolnum>
</refmeta>
<refnamediv>
<refname>SaXException</refname>
<refpurpose>Exception class</refpurpose>
</refnamediv>

<!--
#=============================================
# SYNOPSIS...
#=============================================
-->
<refsynopsisdiv>
<synopsis>
#include &lt;sax.h&gt;
</synopsis>
Inherits <filename>QObject</filename>
</refsynopsisdiv>

<!--
#=============================================
# Public Members...
#=============================================
-->
<refsect2><title>Public Members</title>
<para>
	<itemizedlist>
	<listitem><para>
		<function>SaXException</function> ( void )
	</para></listitem>
	<listitem><para>
        static void <function>setDebug</function> ( bool=true )
    </para></listitem>
	<listitem><para>
		int   <function>errorCode</function>      ( void )
	</para></listitem>
	<listitem><para>
		void  <function>errorReset</function>     ( void )
	</para></listitem>
	<listitem><para>
		bool  <function>havePrivileges</function> ( void )
	</para></listitem>
	<listitem><para>
		QString <function>errorString</function> ( void )
	</para></listitem>
	<listitem><para>
		QString <function>errorValue</function>  ( void )
	</para></listitem>
	<listitem><para>
		void <function>excProcessFailed</function>              ( void )
	</para></listitem>
	<listitem><para>
		void <function>excImportSectionFailed</function>        ( void )
	</para></listitem>
	<listitem><para>
		void <function>excExportSectionFailed</function>        ( void )
	</para></listitem>
	<listitem><para>
		void <function>excFileOpenFailed</function>             ( int  )
	</para></listitem>
	<listitem><para>
		void <function>excNoStorage</function>                  ( int  )
	</para></listitem>
	<listitem><para>
		void <function>excCDBFileFailed</function>              ( void )
	</para></listitem>
	<listitem><para>
		void <function>excPermissionDenied</function>           ( void )
	</para></listitem>
	<listitem><para>
		void <function>excProfileNotFound</function>            ( void )
	</para></listitem>
	<listitem><para>
		void <function>excProfileUndefined</function>           ( int  )
	</para></listitem>
	<listitem><para>
		void <function>excImportAlreadyAdded</function>         ( int  )
	</para></listitem>
	<listitem><para>
		void <function>excUnknownImport</function>              ( SaXImport* )
	</para></listitem>
	<listitem><para>
		void <function>excNoAPIFileFound</function>             ( void )
	</para></listitem>
	<listitem><para>
		void <function>excNullPointerArgument</function>        ( void )
	</para></listitem>
	<listitem><para>
		void <function>excXKBLoadRulesFailed</function>         ( void )
	</para></listitem>
	<listitem><para>
		void <function>excCDBRecordNotFound</function>          ( const char* )
	</para></listitem>
	<listitem><para>
		void <function>excWrongInputFashion</function>          ( const char* )
	</para></listitem>
	<listitem><para>
		void <function>excSetStorageIDFailed</function>         ( int )
	</para></listitem>
	<listitem><para>
		void <function>excInvalidArgument</function>            ( int )
	</para></listitem>
	<listitem><para>
		void <function>excInvalidArgument</function>            ( const char* )
	</para></listitem>
	<listitem><para>
		void <function>excDesktopImportBindFailed</function>    ( int )
	</para></listitem>
	<listitem><para>
		void <function>excCardImportBindFailed</function>       ( int )
	</para></listitem>
	<listitem><para>
		void <function>excPointerImportBindFailed</function>    ( int )
	</para></listitem>
	<listitem><para>
		void <function>excKeyboardImportBindFailed</function>   ( int )
	</para></listitem>
	<listitem><para>
		void <function>excPathImportBindFailed</function>       ( int )
	</para></listitem>
	<listitem><para>
		void <function>excLayoutImportBindFailed</function>     ( int )
	</para></listitem>
	<listitem><para>
		void <function>excExtensionsImportBindFailed</function> ( int )
	</para></listitem>
	<listitem><para>
		void <function>excPointerFashionTypeFailed</function>   ( const char* )
	</para></listitem>
	<listitem><para>
		void <function>excLockSetFailed</function>              ( int )
	</para></listitem>
	<listitem><para>
		void <function>excLockUnsetFailed</function>            ( int )
	</para></listitem>
	<listitem><para>
		void <function>excGetScreenLayoutFailed</function>      ( int )
	</para></listitem>
	<listitem><para>
		void <function>excEmptyCDBGroup</function>              ( const char* )
	</para></listitem>
	<listitem><para>
		void <function>excNvidiaDriverMissing</function>        ( void )
	</para></listitem>
	<listitem><para>
		void <function>excNvidiaDriverInstalled</function>      ( void )
	</para></listitem>
	<listitem><para>
		void <function>excXKBLayoutUndefined</function>         ( const char* )
	</para></listitem>
	</itemizedlist>
</para>
</refsect2>

<!--
#=============================================
# Private Members...
#=============================================
-->
<refsect2><title>Private Members</title>
<para>
	<itemizedlist>
	<listitem><para>
		void <function>setErrorCode</function>    ( int )
	</para></listitem>
	<listitem><para>
		void <function>setErrorCode</function>    ( const char*,int )
	</para></listitem>
	<listitem><para>
		void <function>setErrorValue</function>   ( int )
	</para></listitem>
	<listitem><para>
		void <function>setErrorValue</function>   ( const char* )
	</para></listitem>
	<listitem><para>
		void <function>setErrorValue</function>   ( void* )
	</para></listitem>
	</itemizedlist>
</para>
</refsect2>

<!--
#=============================================
# Protected Members...
#=============================================
-->
<refsect2><title>Protected Members</title>
<para>
	<itemizedlist>
	<listitem><para>
		bool <function>setLock</function> ( void )
	</para></listitem>
	<listitem><para>
		bool <function>unsetLock</function> ( void )
	</para></listitem>
	</itemizedlist>
</para>
</refsect2>

<!--
#=============================================
# Signals...
#=============================================
-->
<refsect2><title>Signals</title>
<para>
	<itemizedlist>
	<listitem><para>
		void <function>saxProcessFailed</function>              ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxImportSectionFailed</function>        ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxExportSectionFailed</function>        ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxFileOpenFailed</function>             ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxNoStorage</function>                  ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxCDBFileFailed</function>              ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxPermissionDenied</function>           ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxProfileNotFound</function>            ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxProfileUndefined</function>           ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxImportAlreadyAdded</function>         ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxUnknownImport</function>              ( SaXImport* )
	</para></listitem>
	<listitem><para>
		void <function>saxNoAPIFileFound</function>             ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxNullPointerArgument</function>        ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxDesktopImportBindFailed</function>    ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxCardImportBindFailed</function>       ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxPointerImportBindFailed</function>    ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxKeyboardImportBindFailed</function>   ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxPathImportBindFailed</function>       ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxExtensionsImportBindFailed</function> ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxLayoutImportBindFailed</function>     ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxXKBLoadRulesFailed</function>         ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxCDBRecordNotFound</function>          ( const char* )
	</para></listitem>
	<listitem><para>
		void <function>saxWrongInputFashion</function>          ( const char* )
	</para></listitem>
	<listitem><para>
		void <function>saxPointerFashionTypeFailed</function>   ( const char* )
	</para></listitem>
	<listitem><para>
		void <function>saxSetStorageIDFailed</function>         ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxInvalidArgument</function>            ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxInvalidArgument</function>            ( const char* )
	</para></listitem>
	<listitem><para>
		void <function>saxLockSetFailed</function>              ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxLockUnsetFailed</function>            ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxGetScreenLayoutFailed</function>      ( int  )
	</para></listitem>
	<listitem><para>
		void <function>saxEmptyCDBGroup</function>              ( const char* ); 
	</para></listitem>
	<listitem><para>
		void <function>saxNvidiaDriverMissing</function>        ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxNvidiaDriverInstalled</function>      ( void )
	</para></listitem>
	<listitem><para>
		void <function>saxXKBLayoutUndefined</function>         ( const char* )
	</para></listitem>
	</itemizedlist>
</para>
</refsect2>

<!--
#=============================================
# DESCRIPTION...
#=============================================
-->
<refsect1><title>Description</title>
<para>
The SaXException class is a container for all exceptions of the
library. It provides methods to set and retrieve error codes and
error strings. Within the library each class which may run into
an error inherits from SaXException and therefore each SaX* class
stores their errors inside the object instance. The programmer is
able to use the methods <function>obj-&gt;errorCode()</function> and
<function>obj-&gt;errorString()</function> to
obtain possible errors or the programmer can create its own
exception class which needs to inherit from SaXException. While
constructing an object of this exception class the programmer
needs to pass the SaX* object which should be watched to the constructor
of its own class. If an error occurs the appropriate exception method is
called. The following example will show how to make use of the libsax
exception handling.
</para>
</refsect1>

<!--
#=============================================
# EXAMPLES...
#=============================================
-->
<refsect2><title>Example</title>
<variablelist>
<varlistentry>
<term><filename>my_excpetion.h</filename></term>
<listitem>
<programlisting>
class myException : public SaXException {
    Q_OBJECT

    public:
    myException (SaXException*);

    private slots:
    void processFailed ( void );
    void permissionDenied ( void );
};
</programlisting>
</listitem>
</varlistentry>
<varlistentry>
<term><filename>my_exception.cpp</filename></term>
<listitem>
<programlisting>
#include "my_exception.h"

myException::myException (SaXException* mException)  {
    connect (
        mException, SIGNAL (saxProcessFailed (void)),
        this      , SLOT   (processFailed (void))
    );
    connect (
        mException, SIGNAL (saxPermissionDenied (void)),
        this      , SLOT   (permissionDenied (void))
    );
}

void myException::processFailed (void) {
    printf ("Process failed...\n");
}

void myException::permissionDenied (void) {
    printf ("Permission denied...\n");
}
</programlisting>
</listitem>
</varlistentry>
<varlistentry>
<term><filename>sample.cpp</filename></term>
<listitem>
<programlisting>
int main (void) {
    SaXException::setDebug();

    SaXInit* init = new SaXInit;
    myException* e = new myException ( init );
    ...
}
</programlisting>
</listitem>
</varlistentry>
</variablelist>
</refsect2>

<!--
#=============================================
# MEMBER FUNCTION DOCUMENTATION...
#=============================================
-->
<refsect1><title>MEMBER FUNCTION DOCUMENTATION</title>
<variablelist>
<varlistentry>
<term><function>SaXException::SaXException</function> (void)</term>
<listitem><para>
Constructs a SaXException object
</para></listitem>
</varlistentry>
<varlistentry>
<term>static void <function>SaXException::setDebug</function> (bool enable)</term>
<listitem><para>
static member (class method) to be called without object. This member
will enable the debug mode for libsax. The messages displayed contains the
location of an exception the name of the exception and a short error text. 
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::setErrorCode</function> (int id)</term>
<listitem><para>
private member internally used to set the error ERRNO
based error code if an error has occured
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::setErrorCode</function> (const char* msg, int id)</term>
<listitem><para>
private member internally used to set the error message and
error code if an error has occured
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::setErrorValue</function> ( int data )</term>
<listitem><para>
private member internally used to set an integer error value
if an error has occured
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::setErrorValue</function> ( const char* data )</term>
<listitem><para>
private member internally used to set an char error value
if an error has occured
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::setErrorValue</function> ( void* data )</term>
<listitem><para>
private member internally used to set an address error value
if an error has occured
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::errorReset</function> ( void )</term>
<listitem><para>
reset all error variables
</para></listitem>
</varlistentry>
<varlistentry>
<term>int <function>SaXException::errorCode</function> ( void )</term>
<listitem><para>
retrieve the last error code, if there is no error 0 is returned
</para></listitem>
</varlistentry>
<varlistentry>
<term>QString <function>SaXException::errorString</function> ( void )</term>
<listitem><para>
retrieve the last error string, if there is no error "Success"
is returned
</para></listitem>
</varlistentry>
<varlistentry>
<term>QString <function>SaXException::errorValue</function> ( void )</term>
<listitem><para>
retrieve the last error value, if there is no error "(null)"
is returned
</para></listitem>
</varlistentry>
<varlistentry>
<term>bool <function>SaXException::havePrivileges</function> (void)</term>
<listitem><para>
Checks if root privileges have been provided
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excProcessFailed</function> (void)</term>
<listitem><para>
The process did not start for some reason
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excImportSectionFailed</function> (void)</term>
<listitem><para>
The section ID used to create a SaXImport was invalid
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excExportSectionFailed</function> (void)</term>
<listitem><para>
The section ID of the SaXImport object is invalid so
it cannot be part of a SaXExport object
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excFileOpenFailed</function> (int e)</term>
<listitem><para>
A file couldn't be opened because of the reason
viewable in <function>errno</function>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excNoStorage</function> (int id)</term>
<listitem><para>
The imported SaXImport object bound to a SaXExport
object doesn`t contain any data table refering to config
ID: <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excCDBFileFailed</function> (void)</term>
<listitem><para>
The given CDB ID cannot be translated into a real
file name
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excPermissionDenied</function> (void)</term>
<listitem><para>
root privileges are not granted
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excProfileNotFound</function> (void)</term>
<listitem><para>
The profile file doesn't exist
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excProfileUndefined</function> (int id)</term>
<listitem><para>
The profile did not contain data in one of the supported
sections: SAX_CARD,SAX_DESKTOP,SAX_LAYOUT or SAX_POINTERS.
The given section ID is viewable as <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excImportAlreadyAdded</function> (int id)</term>
<listitem><para>
A SaXImport object of type <filename>id</filename> was already added
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excUnknownImport</function> (SaXImport* in)</term>
<listitem><para>
The section ID of the SaXImport object which should be added
to a SaXConfig object by calling addImport() is invalid. The
SaXImport object pointer is viewable as <filename>in</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excNoAPIFileFound</function> (void)</term>
<listitem><para>
The <filename>/var/lib/sax/apidata</filename> file does not exist. The apidata
file is the input file used with isax to create the configuration
file it is created automatically when needed so this exception never
should occur. If you discover this exception please check the
<filename>/var/lib/sax</filename> environment refering the current permissions
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excNullPointerArgument</function> (void)</term>
<listitem><para>
The given argument was a (null) pointer which is not allowed
for the method used
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excDesktopImportBindFailed</function> (int id)</term>
<listitem><para>
The wrong SaXImport object was used to initialize a desktop
manipulator class object. Used ID is viewable as <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excCardImportBindFailed</function> (int id)</term>
<listitem><para>
The wrong SaXImport object was used to initialize a card
manipulator class object. Used ID is viewable as <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excPointerImportBindFailed</function> (int id)</term>
<listitem><para>
The wrong SaXImport object was used to initialize a pointer
manipulator class object. Used ID is viewable as <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excKeyboardImportBindFailed</function> (int id)</term>
<listitem><para>
The wrong SaXImport object was used to initialize a keyboard
manipulator class object. Used ID is viewable as <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excPathImportBindFailed</function> (int id)</term>
<listitem><para>
The wrong SaXImport object was used to initialize a path
manipulator class object. Used ID is viewable as <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excExtensionsImportBindFailed</function> (int id)</term>
<listitem><para>
The wrong SaXImport object was used to initialize an extensions
manipulator class object. Used ID is viewable as <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excLayoutImportBindFailed</function> (int id)</term>
<listitem><para>
The wrong SaXImport object was used to initialize a layout
manipulator class object. Used ID is viewable as <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excXKBLoadRulesFailed</function> (void)</term>
<listitem><para>
The <filename>/usr/X11R6/lib/X11/xkb/rules/(rule)</filename> file couldn't be opened
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excCDBRecordNotFound</function> (const char* group)</term>
<listitem><para>
The group search for the CDB data record <filename>group</filename> has failed
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excWrongInputFashion</function> (const char* fashion)</term>
<listitem><para>
The given InputFashion type is invalid refering to pointers.h
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excSetStorageIDFailed</function> (int id)</term>
<listitem><para>
The call to <function>setID()</function> could not find a record with ID <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excPointerFashionTypeFailed</function> (const char* fashion)</term>
<listitem><para>
A wrong input fashion type was set. I expected SAX_INPUT_PEN
or SAX_INPUT_ERASER. Given fashion type was <filename>fashion</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excInvalidArgument</function> (int id)</term>
<listitem><para>
Wrong integer argument <filename>id</filename> set for member call
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excInvalidArgument</function> (const char* arg)</term>
<listitem><para>
Wrong string argument <filename>arg</filename> set for member call
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excLockSetFailed</function> (int error)</term>
<listitem><para>
The call to flock LOCK_EX failed for descriptor <filename>fd</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excLockUnsetFailed</function> (int error)</term>
<listitem><para>
The call to flock LOCK_UN failed for descriptor <filename>fd</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excGetScreenLayoutFailed</function> (int id)</term>
<listitem><para>
Empty screen definition in layout section for screen ID <filename>id</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excEmptyCDBGroup</function> (const char* name)</term>
<listitem><para>
Couldn't find a CDB record for the given group name <filename>name</filename>
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excNvidiaDriverMissing</function> ( void )</term>
<listitem><para>
Couldn't enable 3D because the nvidia binary driver is missing
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excNvidiaDriverInstalled</function> ( void )</term>
<listitem><para>
Couldn't disable 3D because the nvidia driver is installed
</para></listitem>
</varlistentry>
<varlistentry>
<term>void <function>SaXException::excXKBLayoutUndefined</function> ( const char* layout )</term>
<listitem><para>
Couldn't find the given XKB layout <filename>layout</filename> in the current layout list.
Because of this reason it is not possible to apply a variant for this
layout.
</para></listitem>
</varlistentry>
<varlistentry>
<term>bool <function>SaXException::setLock</function> ( void )</term>
<listitem><para>
Apply an advisory lock on the open file specified by ZERO_DEV.
</para></listitem>
</varlistentry>
<varlistentry>
<term>bool <function>SaXException::unsetLock</function> ( void )</term>
<listitem><para>
Remove an advisory lock on the open file specified by ZERO_DEV.
</para></listitem>
</varlistentry>
</variablelist>
</refsect1>

<!--
#=============================================
# COPYRIGHT...
#=============================================
-->
<refsect1><title>COPYRIGHT</title>
<para>
(C) Copyright 2000-2005 - SuSE GmbH, <ulink>http://www.suse.de</ulink>.
See the license file included in the distribution for a complete license
statement.
</para>
</refsect1>

<!--
#=============================================
# AUTHOR...
#=============================================
-->
<refsect1><title>AUTHOR</title>
<para>
Marcus Schäfer <email>ms@suse.de</email>
</para>
</refsect1>
</refentry>
