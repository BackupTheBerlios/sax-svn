#############################################################################
# Makefile for building: xfine
# Generated by qmake (1.07a) (Qt 3.3.4) on: Wed Jul  6 14:21:11 2005
# Project:  xfine.pro
# Template: app app
# Command: $(QMAKE) -o Makefile xfine.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -g -Wall -W -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -g -D_REENTRANT  -DQT_NO_DEBUG -DQT_THREAD_SUPPORT -DQT_SHARED -DQT_TABLET_SUPPORT
CXXFLAGS = -pipe -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -g -Wall -W -O2 -march=i586 -mcpu=i686 -fmessage-length=0 -Wall -g -D_REENTRANT  -DQT_NO_DEBUG -DQT_THREAD_SUPPORT -DQT_SHARED -DQT_TABLET_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/usr/lib/qt3/mkspecs/linux-g++ -I. -I/usr/include -I$(QTDIR)/include
LINK     = g++
LFLAGS   = 
LIBS     = $(SUBLIBS) -L/usr/lib/ -L$(QTDIR)/lib/ -L/usr/X11R6/lib/ -lXss -lXinerama -lGL -lXxf86vm -L/usr/X11R6/lib -lqt-mt -lXext -lX11 -lm -lpthread
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = ./

####### Files

HEADERS = frame.h \
		xfine.h \
		xquery.h \
		file.h \
		common/log.h \
		common/qx.h \
		common/xlock.h
SOURCES = frame.cpp \
		xfine.cpp \
		xquery.cpp \
		file.cpp \
		common/log.cpp \
		common/qx.cpp \
		common/xlock.cpp
OBJECTS = frame.o \
		xfine.o \
		xquery.o \
		file.o \
		log.o \
		qx.o \
		xlock.o
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = moc_frame.cpp
OBJMOC = moc_frame.o
DIST	   = xfine.pro
QMAKE_TARGET = xfine
DESTDIR  = 
TARGET   = xfine

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(OBJCOMP) $(LIBS)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: xfine.pro  /usr/lib/qt3/mkspecs/linux-g++/qmake.conf /usr/lib/qt3/lib/libqt-mt.prl
	$(QMAKE) -o Makefile xfine.pro
qmake: 
	@$(QMAKE) -o Makefile xfine.pro

dist: 
	@mkdir -p .tmp/xfine && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .tmp/xfine/ && ( cd `dirname .tmp/xfine` && $(TAR) xfine.tar xfine && $(GZIP) xfine.tar ) && $(MOVE) `dirname .tmp/xfine`/xfine.tar.gz . && $(DEL_FILE) -r .tmp/xfine

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:

yaccclean:
lexclean:
clean: mocclean
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


FORCE:

####### Compile

frame.o: frame.cpp frame.h \
		xquery.h \
		xfine.h \
		file.h \
		config.h \
		../api/common/log.h \
		common/qx.h

xfine.o: xfine.cpp frame.h \
		xfine.h \
		xquery.h \
		config.h \
		file.h \
		../api/common/log.h \
		common/qx.h

xquery.o: xquery.cpp xquery.h \
		config.h \
		common/qx.h

file.o: file.cpp file.h \
		../api/common/log.h \
		config.h

log.o: common/log.cpp common/log.h \
		config.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o log.o common/log.cpp

qx.o: common/qx.cpp common/qx.h \
		common/log.h \
		common/xlock.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o qx.o common/qx.cpp

xlock.o: common/xlock.cpp common/xlock.h \
		common/log.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o xlock.o common/xlock.cpp

moc_frame.o: moc_frame.cpp  frame.h xfine.h \
		file.h \
		config.h \
		../api/common/log.h

moc_frame.cpp: $(MOC) frame.h
	$(MOC) frame.h -o moc_frame.cpp

####### Install

install:  

uninstall:  

