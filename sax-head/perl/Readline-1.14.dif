--- Gnu.xs
+++ Gnu.xs	2004/09/27 14:37:29
@@ -191,18 +191,13 @@
 extern char *xfree PARAMS((char *));
 
 #else /* not OS2_USEDLL */
-static void
-xfree (string)
-     char *string;
-{
-  if (string)
-    free (string);
+static void xfree (char* string) {
+  if (string) free (string);
 }
 #endif /* not OS2_USEDLL */
 
 static char *
-dupstr(s)			/* duplicate string */
-     char *s;
+dupstr(char* s)			/* duplicate string */
 {
   /*
    * Use xmalloc(), because allocated block will be freed in the GNU
@@ -712,7 +707,7 @@
       matches[0] = matches[1];
       matches[1] = NULL;
     } else if (count == 1 && !matches[0]) { /* in case of a list of undef */
-      xfree(matches);
+      xfree((char*)matches);
       matches = NULL;
     }
   } else {
@@ -1207,7 +1202,7 @@
 	  fntbl[i].pfn = newSVsv(fn);
 	  
 	  /* rl_add_defun() always returns 0. */
-	  rl_add_defun(dupstr(name), fntbl[i].wrapper, key);
+	  rl_add_defun(dupstr((char*)name), fntbl[i].wrapper, key);
 	  RETVAL = fntbl[i].wrapper;
 	}
     OUTPUT:
@@ -1364,7 +1359,7 @@
 	Keymap map
     PROTOTYPE: $$;$
     CODE:
-	RETVAL = rl_generic_bind(ISMACR, keyseq, dupstr(macro), map);
+	RETVAL = rl_generic_bind(ISMACR, keyseq, dupstr((char*)macro), map);
     OUTPUT:
 	RETVAL
 
@@ -1679,7 +1674,7 @@
 	const char *	macro
     PROTOTYPE: $
     CODE:
-	rl_push_macro_input(dupstr(macro));
+	rl_push_macro_input(dupstr((char*)macro));
 
  #
  #	2.4.8 Character Input
@@ -1819,7 +1814,7 @@
 
 	  for (i = 1; i <= len; i++)
 	    xfree(matches[i]);
-	  xfree(matches);
+	  xfree((char*)matches);
 	}
 
 #endif /* (RL_VERSION_MAJOR >= 4) */
--- Gnu/XS.pm
+++ Gnu/XS.pm	2004/09/27 14:37:29
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #
 #	XS.pm : perl function definition for Term::ReadLine::Gnu
 #
--- Gnu/euc_jp.pm
+++ Gnu/euc_jp.pm	2004/09/27 14:37:29
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #
 #	euc_jp.pm : EUC Japanese Character Support Functions
 #		This modules is experimental.  API may be changed.
--- eg/fileman
+++ eg/fileman	2004/09/27 14:37:29
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #
 # $Id$
 #
--- eg/perlsh
+++ eg/perlsh	2004/09/27 14:37:29
@@ -1,4 +1,4 @@
-#! /usr/local/bin/perl
+#!/usr/bin/perl
 #
 #	$Id$	
 #
--- eg/pftp
+++ eg/pftp	2004/09/27 14:37:29
@@ -1,4 +1,4 @@
-#! /usr/local/bin/perl
+#!/usr/bin/perl
 #
 #	$Id$
 #
--- eg/ptksh+
+++ eg/ptksh+	2004/09/27 14:37:29
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl -w
+#!/usr/bin/perl -w
 #
 # $Id$
 #
--- ppport.h
+++ ppport.h	2004/09/27 14:37:29
@@ -40,7 +40,7 @@
    special defines should be used, ppport.h can be run through Perl to check
    your source code. Simply say:
    
-   	perl -x ppport.h *.c *.h *.xs foo/*.c [etc]
+   	perl -x ppport.h *.c *.h *.xs foo/foo.c [etc]
    
    The result will be a list of patches suggesting changes that should at
    least be acceptable, if not necessarily the most efficient solution, or a
--- typemap
+++ typemap	2004/09/27 14:40:34
@@ -24,7 +24,11 @@
 	    /* module FileHandle expects PerlIO is blessed to IO::Handle */
 	    /* This stop segmentation fault on Perl 5.8.0 w/PerlIO */
 	    GV *gv = newGVgen("IO::Handle");
-	    PerlIO *fp = PerlIO_importFILE($var,0);
+	    PerlIO *fp = PerlIO_fdopen(fileno($var),"r+");
+	    if (!fp)
+	        fp = PerlIO_fdopen(fileno($var),"w");
+	    if (!fp)
+	        fp = PerlIO_fdopen(fileno($var),"r");
 	    if ( fp && do_open(gv, "+<&", 3, FALSE, 0, 0, fp) )
 		sv_setsv($arg, sv_bless(newRV((SV*)gv), gv_stashpv("IO::Handle",1)));
 	    else
