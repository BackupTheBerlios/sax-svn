#!/usr/bin/perl
# Copyright (c) 2000 SuSE GmbH Nuernberg, Germany.  All rights reserved.
#
# Author: Marcus Schaefer <sax@suse.de>, 2001
# Build script for SaX2 with CVS access
#
# Syntax:
# -------
#   doit --ftp
#   doit --prepare [ --tag <tag> ] [ --branch <branch> ] [ --patchlevel <n> ]
#   doit --build   [ PrepareOptions ]  [ --clean ]
#
# tag or branch specifiy the subversion location where a tag
# or a branch source is stored. The patchlevel option indicate up to
# which patchlevel a patch or a set of patches should be created
# ---
#
use strict;
use Getopt::Long;
use Env;

#=====================================
# Globals...
#-------------------------------------
my $Build;
my $PutOnFTP;
my $Prepare;
my $Tag;
my $Branch;
my $PatchList;
my $Clean;

#----[ main ]-----------------#
sub main {
#-----------------------------------------------
# main routine to build and prepare for all the
# package and version stuff
#
	my $result = GetOptions(
		"ftp|f"          => \$PutOnFTP,
		"build|b"        => \$Build,
		"tag|t=s"        => \$Tag,  
		"branch|r=s"     => \$Branch,
		"prepare|p"      => \$Prepare,
		"patchlevel|l=s" => \$PatchList,
		"clean|c"        => \$Clean,
		"help|h"         => \&usage,
		"<>"             => \&usage
	);
	if ( $result != 1 ) {
		usage();
	}
	#==============================================
	# Put Packages onto the FTP Server...
	#----------------------------------------------
	if (defined $PutOnFTP) {
		print "Update FTP packages...\n";
		if (! -f "./.ftp") {
			die "Could not find .ftp script... abort";
		}
		system ("./.ftp");
		exit (0);
    }
	#==============================================
	# Check user privileges...
	#----------------------------------------------
	my $user = qx(whoami);
	if ((defined $Build) && ($user !~ /root/i)) {
		die "Only root can do this... abort";
	}
	if ((! defined $Build) && (! defined $Prepare)) {
		usage();
	}
	#==============================================
	# Setup subversion path for checkout...
	#----------------------------------------------
	my $tagsID;
	my $treeID;
	if (defined $Branch) {
		$tagsID = $Branch;
		$treeID = "sax-branches";
	}
	if (defined $Tag) {
		$tagsID = $Tag;
		$treeID = "sax-tags";
	}
	#==============================================
	# Checkout source
	#----------------------------------------------
	my $pacdir = checkout (
		$tagsID,$treeID
	);
	#==============================================
	# Creating Patches...
	#----------------------------------------------
	my @patches = ();
	if (defined $PatchList) {
		# TODO...
	}
	#==============================================
	# Patch spec file...
	#----------------------------------------------
	if (@patches > 0) {
		# TODO...
	}
	#==============================================
	# Build package...
	#----------------------------------------------
	if (defined $Build) {
	if (defined $Clean) {
		chdir $pacdir && system ("./.build clean");
	} else {
		chdir $pacdir && system ("./.build");
	}
	}
	#==============================================
	# Clean sweep
	#----------------------------------------------
	if (defined $Build) {
		#qx (rm -rf $pacdir);
	} else {
		my $host = qx (hostname);
		chomp ($host);
		print 'Retrieve archive with: ';
		print '[ scp -r root@'.$host.':'.$pacdir." . ]\n";
	}
}

#---[ checkout ]-----#
sub checkout {
#-------------------------------------------------
# checkout sources and create a package directory
# ready to go to /work/src/done
#
	my $pacdir = svnup (@_);
	chdir $pacdir;
	qx( mv sax/rpm/* . );
	if (defined $Build) {
		qx( mv sax/.build . );
	}
	chdir $pacdir."/sax" && qx (./.archive);
	chdir $pacdir;
	qx( mv sax/*.bz2 ./sax2.tar.bz2 );
	qx( rm -rf sax );
	return $pacdir;
}

#----[ svnup ]----------------#
sub svnup {
#-----------------------------------------------
# checkout SaX2 source according to an optional
# tag and return the pathname of the temp directory
# where the new sources are located
#
	my $tagName = $_[0];
	my $treeID  = $_[1];

	my $svnPath = "/opt/repository/sax";
	if (defined $tagName) {
		$svnPath = "/opt/repository/".$treeID."/".$tagName;
	}
	my $tmpdir = qx (
		mktemp -q -d /tmp/svnsax.XXXXXX
	);
	chomp $tmpdir;
	if (! -e $tmpdir) {
		die "Could not create temp dir: $!";
	}
	chdir $tmpdir;
	qx (svn co file://$svnPath sax) || 
		die "checkout failed !";
	return $tmpdir;
}

#----[ usage ]------------#
sub usage {
#----------------------------------------
# give me a usage message
#	
	print "usage: doit [ options ]\n";
	print "options:\n";
	print "[ -f | --ftp ]\n";
	print "   put packages to the FTP server\n";
	print "\n";
	print "[ -p | --prepare [ --tag | --branch <name> ] ]\n";
	print "   prepare package for build. Use sources as specified\n";
    print "   by tag or branch. If no tag is given the head will\n";
	print "   be used\n";
    print "\n";
	print "[ -b | --build [ --tag | --branch <name> ] [ --clean ] ]\n";
	print "   prepare and build package\n";
	print "   same as -p except the fact that the package build\n";
	print "   immediatelly. --clean will remove the buildsystem and\n";
	print "   setup a new one\n";
    print "\n";
	print "[ -l | --patchlevel <n> ]\n";
	print "   patches the sources from -b or -p up to the given\n";
	print "   patchlevel. More than one level may be specified as\n"; 
	print "   comma seperated list\n";
	print "--\n";
	exit (0);
}

main();
